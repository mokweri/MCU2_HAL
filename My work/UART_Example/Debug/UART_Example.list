
UART_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000124c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080013d4  080013d4  000113d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080013f4  080013f4  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080013f4  080013f4  000113f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080013fc  080013fc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080013fc  080013fc  000113fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001400  08001400  00011400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08001404  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00000064  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000074  20000074  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000651b  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000011ed  00000000  00000000  0002655b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000005b8  00000000  00000000  00027748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000550  00000000  00000000  00027d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020974  00000000  00000000  00028250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00006ad7  00000000  00000000  00048bc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c68fa  00000000  00000000  0004f69b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00115f95  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001650  00000000  00000000  00115fe8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080013bc 	.word	0x080013bc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	080013bc 	.word	0x080013bc

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <SysTick_Handler>:
 *      Author: OBED
 */
#include "stm32f4xx_hal.h"

void SysTick_Handler(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80004d4:	f000 f94e 	bl	8000774 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 80004d8:	f000 fa7d 	bl	80009d6 <HAL_SYSTICK_IRQHandler>
}
 80004dc:	bf00      	nop
 80004de:	bd80      	pop	{r7, pc}

080004e0 <main>:

char *user_data = "The application is ok\r\n";


int main(void)
{
 80004e0:	b598      	push	{r3, r4, r7, lr}
 80004e2:	af00      	add	r7, sp, #0
	HAL_Init();
 80004e4:	f000 f8f4 	bl	80006d0 <HAL_Init>
	SystemClockConfig();
 80004e8:	f000 f845 	bl	8000576 <SystemClockConfig>
	UART2_Init();
 80004ec:	f000 f81a 	bl	8000524 <UART2_Init>

	if (HAL_UART_Transmit(&huart2, (uint8_t*)user_data, strlen(user_data), HAL_MAX_DELAY) != HAL_OK)
 80004f0:	4b0a      	ldr	r3, [pc, #40]	; (800051c <main+0x3c>)
 80004f2:	681c      	ldr	r4, [r3, #0]
 80004f4:	4b09      	ldr	r3, [pc, #36]	; (800051c <main+0x3c>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4618      	mov	r0, r3
 80004fa:	f7ff fe65 	bl	80001c8 <strlen>
 80004fe:	4603      	mov	r3, r0
 8000500:	b29a      	uxth	r2, r3
 8000502:	f04f 33ff 	mov.w	r3, #4294967295
 8000506:	4621      	mov	r1, r4
 8000508:	4805      	ldr	r0, [pc, #20]	; (8000520 <main+0x40>)
 800050a:	f000 fc8e 	bl	8000e2a <HAL_UART_Transmit>
 800050e:	4603      	mov	r3, r0
 8000510:	2b00      	cmp	r3, #0
 8000512:	d001      	beq.n	8000518 <main+0x38>
	{
		Error_handler();
 8000514:	f000 f82c 	bl	8000570 <Error_handler>
	}

	while(1);
 8000518:	e7fe      	b.n	8000518 <main+0x38>
 800051a:	bf00      	nop
 800051c:	20000000 	.word	0x20000000
 8000520:	2000002c 	.word	0x2000002c

08000524 <UART2_Init>:

	return 0;
}

void UART2_Init(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
	huart2.Instance = USART2;
 8000528:	4b0f      	ldr	r3, [pc, #60]	; (8000568 <UART2_Init+0x44>)
 800052a:	4a10      	ldr	r2, [pc, #64]	; (800056c <UART2_Init+0x48>)
 800052c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800052e:	4b0e      	ldr	r3, [pc, #56]	; (8000568 <UART2_Init+0x44>)
 8000530:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000534:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000536:	4b0c      	ldr	r3, [pc, #48]	; (8000568 <UART2_Init+0x44>)
 8000538:	2200      	movs	r2, #0
 800053a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800053c:	4b0a      	ldr	r3, [pc, #40]	; (8000568 <UART2_Init+0x44>)
 800053e:	2200      	movs	r2, #0
 8000540:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000542:	4b09      	ldr	r3, [pc, #36]	; (8000568 <UART2_Init+0x44>)
 8000544:	2200      	movs	r2, #0
 8000546:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000548:	4b07      	ldr	r3, [pc, #28]	; (8000568 <UART2_Init+0x44>)
 800054a:	2200      	movs	r2, #0
 800054c:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800054e:	4b06      	ldr	r3, [pc, #24]	; (8000568 <UART2_Init+0x44>)
 8000550:	220c      	movs	r2, #12
 8000552:	615a      	str	r2, [r3, #20]
	if(HAL_UART_Init(&huart2) != HAL_OK)
 8000554:	4804      	ldr	r0, [pc, #16]	; (8000568 <UART2_Init+0x44>)
 8000556:	f000 fc1b 	bl	8000d90 <HAL_UART_Init>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <UART2_Init+0x40>
	{
		//there is a problem
		Error_handler();
 8000560:	f000 f806 	bl	8000570 <Error_handler>
	}
}
 8000564:	bf00      	nop
 8000566:	bd80      	pop	{r7, pc}
 8000568:	2000002c 	.word	0x2000002c
 800056c:	40004400 	.word	0x40004400

08000570 <Error_handler>:

void Error_handler(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
	while(1);
 8000574:	e7fe      	b.n	8000574 <Error_handler+0x4>

08000576 <SystemClockConfig>:

}

void SystemClockConfig()
{
 8000576:	b480      	push	{r7}
 8000578:	af00      	add	r7, sp, #0
	//special system clock configuration
	//use default
}
 800057a:	bf00      	nop
 800057c:	46bd      	mov	sp, r7
 800057e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000582:	4770      	bx	lr

08000584 <HAL_MspInit>:
 *      Author: OBED
 */
#include "stm32f4xx_hal.h"

void HAL_MspInit(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /*
   * Here we do the low level processor specific inits
   */
	//1. Set up the priority grouping of the ARM cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000588:	2003      	movs	r0, #3
 800058a:	f000 f9e3 	bl	8000954 <HAL_NVIC_SetPriorityGrouping>

	//2. Enable the required system exceptions of the ARM Cortex processor
	SCB->SHCSR |= 0x7 << 16; //USGFAULTENA, BUSFAULTENA, MEMFAULTENA
 800058e:	4b0d      	ldr	r3, [pc, #52]	; (80005c4 <HAL_MspInit+0x40>)
 8000590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000592:	4a0c      	ldr	r2, [pc, #48]	; (80005c4 <HAL_MspInit+0x40>)
 8000594:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8000598:	6253      	str	r3, [r2, #36]	; 0x24

	//3. Configure the priority for the system exceptions
		//0 priority by default
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0,0);
 800059a:	2200      	movs	r2, #0
 800059c:	2100      	movs	r1, #0
 800059e:	f06f 0009 	mvn.w	r0, #9
 80005a2:	f000 f9e2 	bl	800096a <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(MemoryManagement_IRQn,0,0);
 80005a6:	2200      	movs	r2, #0
 80005a8:	2100      	movs	r1, #0
 80005aa:	f06f 000b 	mvn.w	r0, #11
 80005ae:	f000 f9dc 	bl	800096a <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn,0,0);
 80005b2:	2200      	movs	r2, #0
 80005b4:	2100      	movs	r1, #0
 80005b6:	f06f 000a 	mvn.w	r0, #10
 80005ba:	f000 f9d6 	bl	800096a <HAL_NVIC_SetPriority>

}
 80005be:	bf00      	nop
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	e000ed00 	.word	0xe000ed00

080005c8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b08a      	sub	sp, #40	; 0x28
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef gpio_uart2;
	//Low level initialization of the USART2 peripheral
	//1. Enable the clock for the USART and GPIOA peripheral
	__HAL_RCC_USART2_CLK_ENABLE();
 80005d0:	2300      	movs	r3, #0
 80005d2:	613b      	str	r3, [r7, #16]
 80005d4:	4b1e      	ldr	r3, [pc, #120]	; (8000650 <HAL_UART_MspInit+0x88>)
 80005d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d8:	4a1d      	ldr	r2, [pc, #116]	; (8000650 <HAL_UART_MspInit+0x88>)
 80005da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005de:	6413      	str	r3, [r2, #64]	; 0x40
 80005e0:	4b1b      	ldr	r3, [pc, #108]	; (8000650 <HAL_UART_MspInit+0x88>)
 80005e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005e8:	613b      	str	r3, [r7, #16]
 80005ea:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80005ec:	2300      	movs	r3, #0
 80005ee:	60fb      	str	r3, [r7, #12]
 80005f0:	4b17      	ldr	r3, [pc, #92]	; (8000650 <HAL_UART_MspInit+0x88>)
 80005f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f4:	4a16      	ldr	r2, [pc, #88]	; (8000650 <HAL_UART_MspInit+0x88>)
 80005f6:	f043 0301 	orr.w	r3, r3, #1
 80005fa:	6313      	str	r3, [r2, #48]	; 0x30
 80005fc:	4b14      	ldr	r3, [pc, #80]	; (8000650 <HAL_UART_MspInit+0x88>)
 80005fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000600:	f003 0301 	and.w	r3, r3, #1
 8000604:	60fb      	str	r3, [r7, #12]
 8000606:	68fb      	ldr	r3, [r7, #12]

	//2. Do the pin muxing configurations
	gpio_uart2.Pin = GPIO_PIN_2;
 8000608:	2304      	movs	r3, #4
 800060a:	617b      	str	r3, [r7, #20]
	gpio_uart2.Mode = GPIO_MODE_AF_PP;
 800060c:	2302      	movs	r3, #2
 800060e:	61bb      	str	r3, [r7, #24]
	gpio_uart2.Pull = GPIO_PULLUP;
 8000610:	2301      	movs	r3, #1
 8000612:	61fb      	str	r3, [r7, #28]
	gpio_uart2.Speed = GPIO_SPEED_FREQ_LOW;
 8000614:	2300      	movs	r3, #0
 8000616:	623b      	str	r3, [r7, #32]
	gpio_uart2.Alternate = GPIO_AF7_USART2;
 8000618:	2307      	movs	r3, #7
 800061a:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &gpio_uart2);	//TX
 800061c:	f107 0314 	add.w	r3, r7, #20
 8000620:	4619      	mov	r1, r3
 8000622:	480c      	ldr	r0, [pc, #48]	; (8000654 <HAL_UART_MspInit+0x8c>)
 8000624:	f000 f9e4 	bl	80009f0 <HAL_GPIO_Init>

	gpio_uart2.Pin = GPIO_PIN_3;
 8000628:	2308      	movs	r3, #8
 800062a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &gpio_uart2);	//RX
 800062c:	f107 0314 	add.w	r3, r7, #20
 8000630:	4619      	mov	r1, r3
 8000632:	4808      	ldr	r0, [pc, #32]	; (8000654 <HAL_UART_MspInit+0x8c>)
 8000634:	f000 f9dc 	bl	80009f0 <HAL_GPIO_Init>

	//3. Enable the IRQ and set the priority (NVIC settings)
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000638:	2026      	movs	r0, #38	; 0x26
 800063a:	f000 f9b2 	bl	80009a2 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800063e:	2200      	movs	r2, #0
 8000640:	2105      	movs	r1, #5
 8000642:	2026      	movs	r0, #38	; 0x26
 8000644:	f000 f991 	bl	800096a <HAL_NVIC_SetPriority>
}
 8000648:	bf00      	nop
 800064a:	3728      	adds	r7, #40	; 0x28
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	40023800 	.word	0x40023800
 8000654:	40020000 	.word	0x40020000

08000658 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800065c:	4b06      	ldr	r3, [pc, #24]	; (8000678 <SystemInit+0x20>)
 800065e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000662:	4a05      	ldr	r2, [pc, #20]	; (8000678 <SystemInit+0x20>)
 8000664:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000668:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800066c:	bf00      	nop
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	e000ed00 	.word	0xe000ed00

0800067c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800067c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000680:	480d      	ldr	r0, [pc, #52]	; (80006b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000682:	490e      	ldr	r1, [pc, #56]	; (80006bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000684:	4a0e      	ldr	r2, [pc, #56]	; (80006c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000686:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000688:	e002      	b.n	8000690 <LoopCopyDataInit>

0800068a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800068a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800068c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800068e:	3304      	adds	r3, #4

08000690 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000690:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000692:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000694:	d3f9      	bcc.n	800068a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000696:	4a0b      	ldr	r2, [pc, #44]	; (80006c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000698:	4c0b      	ldr	r4, [pc, #44]	; (80006c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800069a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800069c:	e001      	b.n	80006a2 <LoopFillZerobss>

0800069e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800069e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006a0:	3204      	adds	r2, #4

080006a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006a4:	d3fb      	bcc.n	800069e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80006a6:	f7ff ffd7 	bl	8000658 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006aa:	f000 fe63 	bl	8001374 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80006ae:	f7ff ff17 	bl	80004e0 <main>
  bx  lr    
 80006b2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80006b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80006b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006bc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80006c0:	08001404 	.word	0x08001404
  ldr r2, =_sbss
 80006c4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80006c8:	20000074 	.word	0x20000074

080006cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80006cc:	e7fe      	b.n	80006cc <ADC_IRQHandler>
	...

080006d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80006d4:	4b0e      	ldr	r3, [pc, #56]	; (8000710 <HAL_Init+0x40>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a0d      	ldr	r2, [pc, #52]	; (8000710 <HAL_Init+0x40>)
 80006da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80006e0:	4b0b      	ldr	r3, [pc, #44]	; (8000710 <HAL_Init+0x40>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a0a      	ldr	r2, [pc, #40]	; (8000710 <HAL_Init+0x40>)
 80006e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80006ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006ec:	4b08      	ldr	r3, [pc, #32]	; (8000710 <HAL_Init+0x40>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4a07      	ldr	r2, [pc, #28]	; (8000710 <HAL_Init+0x40>)
 80006f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006f8:	2003      	movs	r0, #3
 80006fa:	f000 f92b 	bl	8000954 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006fe:	2000      	movs	r0, #0
 8000700:	f000 f808 	bl	8000714 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000704:	f7ff ff3e 	bl	8000584 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000708:	2300      	movs	r3, #0
}
 800070a:	4618      	mov	r0, r3
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40023c00 	.word	0x40023c00

08000714 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800071c:	4b12      	ldr	r3, [pc, #72]	; (8000768 <HAL_InitTick+0x54>)
 800071e:	681a      	ldr	r2, [r3, #0]
 8000720:	4b12      	ldr	r3, [pc, #72]	; (800076c <HAL_InitTick+0x58>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	4619      	mov	r1, r3
 8000726:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800072a:	fbb3 f3f1 	udiv	r3, r3, r1
 800072e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000732:	4618      	mov	r0, r3
 8000734:	f000 f943 	bl	80009be <HAL_SYSTICK_Config>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800073e:	2301      	movs	r3, #1
 8000740:	e00e      	b.n	8000760 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	2b0f      	cmp	r3, #15
 8000746:	d80a      	bhi.n	800075e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000748:	2200      	movs	r2, #0
 800074a:	6879      	ldr	r1, [r7, #4]
 800074c:	f04f 30ff 	mov.w	r0, #4294967295
 8000750:	f000 f90b 	bl	800096a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000754:	4a06      	ldr	r2, [pc, #24]	; (8000770 <HAL_InitTick+0x5c>)
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800075a:	2300      	movs	r3, #0
 800075c:	e000      	b.n	8000760 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800075e:	2301      	movs	r3, #1
}
 8000760:	4618      	mov	r0, r3
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	20000004 	.word	0x20000004
 800076c:	2000000c 	.word	0x2000000c
 8000770:	20000008 	.word	0x20000008

08000774 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000778:	4b06      	ldr	r3, [pc, #24]	; (8000794 <HAL_IncTick+0x20>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	461a      	mov	r2, r3
 800077e:	4b06      	ldr	r3, [pc, #24]	; (8000798 <HAL_IncTick+0x24>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	4413      	add	r3, r2
 8000784:	4a04      	ldr	r2, [pc, #16]	; (8000798 <HAL_IncTick+0x24>)
 8000786:	6013      	str	r3, [r2, #0]
}
 8000788:	bf00      	nop
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	2000000c 	.word	0x2000000c
 8000798:	20000070 	.word	0x20000070

0800079c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  return uwTick;
 80007a0:	4b03      	ldr	r3, [pc, #12]	; (80007b0 <HAL_GetTick+0x14>)
 80007a2:	681b      	ldr	r3, [r3, #0]
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop
 80007b0:	20000070 	.word	0x20000070

080007b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b085      	sub	sp, #20
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	f003 0307 	and.w	r3, r3, #7
 80007c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007c4:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <__NVIC_SetPriorityGrouping+0x44>)
 80007c6:	68db      	ldr	r3, [r3, #12]
 80007c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007ca:	68ba      	ldr	r2, [r7, #8]
 80007cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007d0:	4013      	ands	r3, r2
 80007d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007d8:	68bb      	ldr	r3, [r7, #8]
 80007da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007e6:	4a04      	ldr	r2, [pc, #16]	; (80007f8 <__NVIC_SetPriorityGrouping+0x44>)
 80007e8:	68bb      	ldr	r3, [r7, #8]
 80007ea:	60d3      	str	r3, [r2, #12]
}
 80007ec:	bf00      	nop
 80007ee:	3714      	adds	r7, #20
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr
 80007f8:	e000ed00 	.word	0xe000ed00

080007fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000800:	4b04      	ldr	r3, [pc, #16]	; (8000814 <__NVIC_GetPriorityGrouping+0x18>)
 8000802:	68db      	ldr	r3, [r3, #12]
 8000804:	0a1b      	lsrs	r3, r3, #8
 8000806:	f003 0307 	and.w	r3, r3, #7
}
 800080a:	4618      	mov	r0, r3
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr
 8000814:	e000ed00 	.word	0xe000ed00

08000818 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
 800081e:	4603      	mov	r3, r0
 8000820:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000826:	2b00      	cmp	r3, #0
 8000828:	db0b      	blt.n	8000842 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800082a:	79fb      	ldrb	r3, [r7, #7]
 800082c:	f003 021f 	and.w	r2, r3, #31
 8000830:	4907      	ldr	r1, [pc, #28]	; (8000850 <__NVIC_EnableIRQ+0x38>)
 8000832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000836:	095b      	lsrs	r3, r3, #5
 8000838:	2001      	movs	r0, #1
 800083a:	fa00 f202 	lsl.w	r2, r0, r2
 800083e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000842:	bf00      	nop
 8000844:	370c      	adds	r7, #12
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	e000e100 	.word	0xe000e100

08000854 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
 800085a:	4603      	mov	r3, r0
 800085c:	6039      	str	r1, [r7, #0]
 800085e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000864:	2b00      	cmp	r3, #0
 8000866:	db0a      	blt.n	800087e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	b2da      	uxtb	r2, r3
 800086c:	490c      	ldr	r1, [pc, #48]	; (80008a0 <__NVIC_SetPriority+0x4c>)
 800086e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000872:	0112      	lsls	r2, r2, #4
 8000874:	b2d2      	uxtb	r2, r2
 8000876:	440b      	add	r3, r1
 8000878:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800087c:	e00a      	b.n	8000894 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	b2da      	uxtb	r2, r3
 8000882:	4908      	ldr	r1, [pc, #32]	; (80008a4 <__NVIC_SetPriority+0x50>)
 8000884:	79fb      	ldrb	r3, [r7, #7]
 8000886:	f003 030f 	and.w	r3, r3, #15
 800088a:	3b04      	subs	r3, #4
 800088c:	0112      	lsls	r2, r2, #4
 800088e:	b2d2      	uxtb	r2, r2
 8000890:	440b      	add	r3, r1
 8000892:	761a      	strb	r2, [r3, #24]
}
 8000894:	bf00      	nop
 8000896:	370c      	adds	r7, #12
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr
 80008a0:	e000e100 	.word	0xe000e100
 80008a4:	e000ed00 	.word	0xe000ed00

080008a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b089      	sub	sp, #36	; 0x24
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	60f8      	str	r0, [r7, #12]
 80008b0:	60b9      	str	r1, [r7, #8]
 80008b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	f003 0307 	and.w	r3, r3, #7
 80008ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008bc:	69fb      	ldr	r3, [r7, #28]
 80008be:	f1c3 0307 	rsb	r3, r3, #7
 80008c2:	2b04      	cmp	r3, #4
 80008c4:	bf28      	it	cs
 80008c6:	2304      	movcs	r3, #4
 80008c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008ca:	69fb      	ldr	r3, [r7, #28]
 80008cc:	3304      	adds	r3, #4
 80008ce:	2b06      	cmp	r3, #6
 80008d0:	d902      	bls.n	80008d8 <NVIC_EncodePriority+0x30>
 80008d2:	69fb      	ldr	r3, [r7, #28]
 80008d4:	3b03      	subs	r3, #3
 80008d6:	e000      	b.n	80008da <NVIC_EncodePriority+0x32>
 80008d8:	2300      	movs	r3, #0
 80008da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008dc:	f04f 32ff 	mov.w	r2, #4294967295
 80008e0:	69bb      	ldr	r3, [r7, #24]
 80008e2:	fa02 f303 	lsl.w	r3, r2, r3
 80008e6:	43da      	mvns	r2, r3
 80008e8:	68bb      	ldr	r3, [r7, #8]
 80008ea:	401a      	ands	r2, r3
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008f0:	f04f 31ff 	mov.w	r1, #4294967295
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	fa01 f303 	lsl.w	r3, r1, r3
 80008fa:	43d9      	mvns	r1, r3
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000900:	4313      	orrs	r3, r2
         );
}
 8000902:	4618      	mov	r0, r3
 8000904:	3724      	adds	r7, #36	; 0x24
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
	...

08000910 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	3b01      	subs	r3, #1
 800091c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000920:	d301      	bcc.n	8000926 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000922:	2301      	movs	r3, #1
 8000924:	e00f      	b.n	8000946 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000926:	4a0a      	ldr	r2, [pc, #40]	; (8000950 <SysTick_Config+0x40>)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	3b01      	subs	r3, #1
 800092c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800092e:	210f      	movs	r1, #15
 8000930:	f04f 30ff 	mov.w	r0, #4294967295
 8000934:	f7ff ff8e 	bl	8000854 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000938:	4b05      	ldr	r3, [pc, #20]	; (8000950 <SysTick_Config+0x40>)
 800093a:	2200      	movs	r2, #0
 800093c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800093e:	4b04      	ldr	r3, [pc, #16]	; (8000950 <SysTick_Config+0x40>)
 8000940:	2207      	movs	r2, #7
 8000942:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000944:	2300      	movs	r3, #0
}
 8000946:	4618      	mov	r0, r3
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	e000e010 	.word	0xe000e010

08000954 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800095c:	6878      	ldr	r0, [r7, #4]
 800095e:	f7ff ff29 	bl	80007b4 <__NVIC_SetPriorityGrouping>
}
 8000962:	bf00      	nop
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}

0800096a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800096a:	b580      	push	{r7, lr}
 800096c:	b086      	sub	sp, #24
 800096e:	af00      	add	r7, sp, #0
 8000970:	4603      	mov	r3, r0
 8000972:	60b9      	str	r1, [r7, #8]
 8000974:	607a      	str	r2, [r7, #4]
 8000976:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000978:	2300      	movs	r3, #0
 800097a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800097c:	f7ff ff3e 	bl	80007fc <__NVIC_GetPriorityGrouping>
 8000980:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000982:	687a      	ldr	r2, [r7, #4]
 8000984:	68b9      	ldr	r1, [r7, #8]
 8000986:	6978      	ldr	r0, [r7, #20]
 8000988:	f7ff ff8e 	bl	80008a8 <NVIC_EncodePriority>
 800098c:	4602      	mov	r2, r0
 800098e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000992:	4611      	mov	r1, r2
 8000994:	4618      	mov	r0, r3
 8000996:	f7ff ff5d 	bl	8000854 <__NVIC_SetPriority>
}
 800099a:	bf00      	nop
 800099c:	3718      	adds	r7, #24
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}

080009a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009a2:	b580      	push	{r7, lr}
 80009a4:	b082      	sub	sp, #8
 80009a6:	af00      	add	r7, sp, #0
 80009a8:	4603      	mov	r3, r0
 80009aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009b0:	4618      	mov	r0, r3
 80009b2:	f7ff ff31 	bl	8000818 <__NVIC_EnableIRQ>
}
 80009b6:	bf00      	nop
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}

080009be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009be:	b580      	push	{r7, lr}
 80009c0:	b082      	sub	sp, #8
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009c6:	6878      	ldr	r0, [r7, #4]
 80009c8:	f7ff ffa2 	bl	8000910 <SysTick_Config>
 80009cc:	4603      	mov	r3, r0
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}

080009d6 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80009d6:	b580      	push	{r7, lr}
 80009d8:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80009da:	f000 f802 	bl	80009e2 <HAL_SYSTICK_Callback>
}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}

080009e2 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80009e2:	b480      	push	{r7}
 80009e4:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80009e6:	bf00      	nop
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr

080009f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b089      	sub	sp, #36	; 0x24
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
 80009f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80009fa:	2300      	movs	r3, #0
 80009fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80009fe:	2300      	movs	r3, #0
 8000a00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000a02:	2300      	movs	r3, #0
 8000a04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a06:	2300      	movs	r3, #0
 8000a08:	61fb      	str	r3, [r7, #28]
 8000a0a:	e16b      	b.n	8000ce4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	69fb      	ldr	r3, [r7, #28]
 8000a10:	fa02 f303 	lsl.w	r3, r2, r3
 8000a14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	697a      	ldr	r2, [r7, #20]
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000a20:	693a      	ldr	r2, [r7, #16]
 8000a22:	697b      	ldr	r3, [r7, #20]
 8000a24:	429a      	cmp	r2, r3
 8000a26:	f040 815a 	bne.w	8000cde <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	685b      	ldr	r3, [r3, #4]
 8000a2e:	f003 0303 	and.w	r3, r3, #3
 8000a32:	2b01      	cmp	r3, #1
 8000a34:	d005      	beq.n	8000a42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	685b      	ldr	r3, [r3, #4]
 8000a3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000a3e:	2b02      	cmp	r3, #2
 8000a40:	d130      	bne.n	8000aa4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	689b      	ldr	r3, [r3, #8]
 8000a46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000a48:	69fb      	ldr	r3, [r7, #28]
 8000a4a:	005b      	lsls	r3, r3, #1
 8000a4c:	2203      	movs	r2, #3
 8000a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a52:	43db      	mvns	r3, r3
 8000a54:	69ba      	ldr	r2, [r7, #24]
 8000a56:	4013      	ands	r3, r2
 8000a58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	68da      	ldr	r2, [r3, #12]
 8000a5e:	69fb      	ldr	r3, [r7, #28]
 8000a60:	005b      	lsls	r3, r3, #1
 8000a62:	fa02 f303 	lsl.w	r3, r2, r3
 8000a66:	69ba      	ldr	r2, [r7, #24]
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	69ba      	ldr	r2, [r7, #24]
 8000a70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a78:	2201      	movs	r2, #1
 8000a7a:	69fb      	ldr	r3, [r7, #28]
 8000a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a80:	43db      	mvns	r3, r3
 8000a82:	69ba      	ldr	r2, [r7, #24]
 8000a84:	4013      	ands	r3, r2
 8000a86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	091b      	lsrs	r3, r3, #4
 8000a8e:	f003 0201 	and.w	r2, r3, #1
 8000a92:	69fb      	ldr	r3, [r7, #28]
 8000a94:	fa02 f303 	lsl.w	r3, r2, r3
 8000a98:	69ba      	ldr	r2, [r7, #24]
 8000a9a:	4313      	orrs	r3, r2
 8000a9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	69ba      	ldr	r2, [r7, #24]
 8000aa2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	f003 0303 	and.w	r3, r3, #3
 8000aac:	2b03      	cmp	r3, #3
 8000aae:	d017      	beq.n	8000ae0 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	68db      	ldr	r3, [r3, #12]
 8000ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ab6:	69fb      	ldr	r3, [r7, #28]
 8000ab8:	005b      	lsls	r3, r3, #1
 8000aba:	2203      	movs	r2, #3
 8000abc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac0:	43db      	mvns	r3, r3
 8000ac2:	69ba      	ldr	r2, [r7, #24]
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	689a      	ldr	r2, [r3, #8]
 8000acc:	69fb      	ldr	r3, [r7, #28]
 8000ace:	005b      	lsls	r3, r3, #1
 8000ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad4:	69ba      	ldr	r2, [r7, #24]
 8000ad6:	4313      	orrs	r3, r2
 8000ad8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	69ba      	ldr	r2, [r7, #24]
 8000ade:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	f003 0303 	and.w	r3, r3, #3
 8000ae8:	2b02      	cmp	r3, #2
 8000aea:	d123      	bne.n	8000b34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000aec:	69fb      	ldr	r3, [r7, #28]
 8000aee:	08da      	lsrs	r2, r3, #3
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	3208      	adds	r2, #8
 8000af4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000af8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000afa:	69fb      	ldr	r3, [r7, #28]
 8000afc:	f003 0307 	and.w	r3, r3, #7
 8000b00:	009b      	lsls	r3, r3, #2
 8000b02:	220f      	movs	r2, #15
 8000b04:	fa02 f303 	lsl.w	r3, r2, r3
 8000b08:	43db      	mvns	r3, r3
 8000b0a:	69ba      	ldr	r2, [r7, #24]
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	691a      	ldr	r2, [r3, #16]
 8000b14:	69fb      	ldr	r3, [r7, #28]
 8000b16:	f003 0307 	and.w	r3, r3, #7
 8000b1a:	009b      	lsls	r3, r3, #2
 8000b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b20:	69ba      	ldr	r2, [r7, #24]
 8000b22:	4313      	orrs	r3, r2
 8000b24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000b26:	69fb      	ldr	r3, [r7, #28]
 8000b28:	08da      	lsrs	r2, r3, #3
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	3208      	adds	r2, #8
 8000b2e:	69b9      	ldr	r1, [r7, #24]
 8000b30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000b3a:	69fb      	ldr	r3, [r7, #28]
 8000b3c:	005b      	lsls	r3, r3, #1
 8000b3e:	2203      	movs	r2, #3
 8000b40:	fa02 f303 	lsl.w	r3, r2, r3
 8000b44:	43db      	mvns	r3, r3
 8000b46:	69ba      	ldr	r2, [r7, #24]
 8000b48:	4013      	ands	r3, r2
 8000b4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	f003 0203 	and.w	r2, r3, #3
 8000b54:	69fb      	ldr	r3, [r7, #28]
 8000b56:	005b      	lsls	r3, r3, #1
 8000b58:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5c:	69ba      	ldr	r2, [r7, #24]
 8000b5e:	4313      	orrs	r3, r2
 8000b60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	69ba      	ldr	r2, [r7, #24]
 8000b66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	f000 80b4 	beq.w	8000cde <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	60fb      	str	r3, [r7, #12]
 8000b7a:	4b60      	ldr	r3, [pc, #384]	; (8000cfc <HAL_GPIO_Init+0x30c>)
 8000b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b7e:	4a5f      	ldr	r2, [pc, #380]	; (8000cfc <HAL_GPIO_Init+0x30c>)
 8000b80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b84:	6453      	str	r3, [r2, #68]	; 0x44
 8000b86:	4b5d      	ldr	r3, [pc, #372]	; (8000cfc <HAL_GPIO_Init+0x30c>)
 8000b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b8e:	60fb      	str	r3, [r7, #12]
 8000b90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000b92:	4a5b      	ldr	r2, [pc, #364]	; (8000d00 <HAL_GPIO_Init+0x310>)
 8000b94:	69fb      	ldr	r3, [r7, #28]
 8000b96:	089b      	lsrs	r3, r3, #2
 8000b98:	3302      	adds	r3, #2
 8000b9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ba0:	69fb      	ldr	r3, [r7, #28]
 8000ba2:	f003 0303 	and.w	r3, r3, #3
 8000ba6:	009b      	lsls	r3, r3, #2
 8000ba8:	220f      	movs	r2, #15
 8000baa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bae:	43db      	mvns	r3, r3
 8000bb0:	69ba      	ldr	r2, [r7, #24]
 8000bb2:	4013      	ands	r3, r2
 8000bb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	4a52      	ldr	r2, [pc, #328]	; (8000d04 <HAL_GPIO_Init+0x314>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d02b      	beq.n	8000c16 <HAL_GPIO_Init+0x226>
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	4a51      	ldr	r2, [pc, #324]	; (8000d08 <HAL_GPIO_Init+0x318>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d025      	beq.n	8000c12 <HAL_GPIO_Init+0x222>
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4a50      	ldr	r2, [pc, #320]	; (8000d0c <HAL_GPIO_Init+0x31c>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d01f      	beq.n	8000c0e <HAL_GPIO_Init+0x21e>
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	4a4f      	ldr	r2, [pc, #316]	; (8000d10 <HAL_GPIO_Init+0x320>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d019      	beq.n	8000c0a <HAL_GPIO_Init+0x21a>
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4a4e      	ldr	r2, [pc, #312]	; (8000d14 <HAL_GPIO_Init+0x324>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d013      	beq.n	8000c06 <HAL_GPIO_Init+0x216>
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	4a4d      	ldr	r2, [pc, #308]	; (8000d18 <HAL_GPIO_Init+0x328>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d00d      	beq.n	8000c02 <HAL_GPIO_Init+0x212>
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4a4c      	ldr	r2, [pc, #304]	; (8000d1c <HAL_GPIO_Init+0x32c>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d007      	beq.n	8000bfe <HAL_GPIO_Init+0x20e>
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4a4b      	ldr	r2, [pc, #300]	; (8000d20 <HAL_GPIO_Init+0x330>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d101      	bne.n	8000bfa <HAL_GPIO_Init+0x20a>
 8000bf6:	2307      	movs	r3, #7
 8000bf8:	e00e      	b.n	8000c18 <HAL_GPIO_Init+0x228>
 8000bfa:	2308      	movs	r3, #8
 8000bfc:	e00c      	b.n	8000c18 <HAL_GPIO_Init+0x228>
 8000bfe:	2306      	movs	r3, #6
 8000c00:	e00a      	b.n	8000c18 <HAL_GPIO_Init+0x228>
 8000c02:	2305      	movs	r3, #5
 8000c04:	e008      	b.n	8000c18 <HAL_GPIO_Init+0x228>
 8000c06:	2304      	movs	r3, #4
 8000c08:	e006      	b.n	8000c18 <HAL_GPIO_Init+0x228>
 8000c0a:	2303      	movs	r3, #3
 8000c0c:	e004      	b.n	8000c18 <HAL_GPIO_Init+0x228>
 8000c0e:	2302      	movs	r3, #2
 8000c10:	e002      	b.n	8000c18 <HAL_GPIO_Init+0x228>
 8000c12:	2301      	movs	r3, #1
 8000c14:	e000      	b.n	8000c18 <HAL_GPIO_Init+0x228>
 8000c16:	2300      	movs	r3, #0
 8000c18:	69fa      	ldr	r2, [r7, #28]
 8000c1a:	f002 0203 	and.w	r2, r2, #3
 8000c1e:	0092      	lsls	r2, r2, #2
 8000c20:	4093      	lsls	r3, r2
 8000c22:	69ba      	ldr	r2, [r7, #24]
 8000c24:	4313      	orrs	r3, r2
 8000c26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000c28:	4935      	ldr	r1, [pc, #212]	; (8000d00 <HAL_GPIO_Init+0x310>)
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	089b      	lsrs	r3, r3, #2
 8000c2e:	3302      	adds	r3, #2
 8000c30:	69ba      	ldr	r2, [r7, #24]
 8000c32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c36:	4b3b      	ldr	r3, [pc, #236]	; (8000d24 <HAL_GPIO_Init+0x334>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c3c:	693b      	ldr	r3, [r7, #16]
 8000c3e:	43db      	mvns	r3, r3
 8000c40:	69ba      	ldr	r2, [r7, #24]
 8000c42:	4013      	ands	r3, r2
 8000c44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d003      	beq.n	8000c5a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000c52:	69ba      	ldr	r2, [r7, #24]
 8000c54:	693b      	ldr	r3, [r7, #16]
 8000c56:	4313      	orrs	r3, r2
 8000c58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000c5a:	4a32      	ldr	r2, [pc, #200]	; (8000d24 <HAL_GPIO_Init+0x334>)
 8000c5c:	69bb      	ldr	r3, [r7, #24]
 8000c5e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000c60:	4b30      	ldr	r3, [pc, #192]	; (8000d24 <HAL_GPIO_Init+0x334>)
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c66:	693b      	ldr	r3, [r7, #16]
 8000c68:	43db      	mvns	r3, r3
 8000c6a:	69ba      	ldr	r2, [r7, #24]
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d003      	beq.n	8000c84 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000c7c:	69ba      	ldr	r2, [r7, #24]
 8000c7e:	693b      	ldr	r3, [r7, #16]
 8000c80:	4313      	orrs	r3, r2
 8000c82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000c84:	4a27      	ldr	r2, [pc, #156]	; (8000d24 <HAL_GPIO_Init+0x334>)
 8000c86:	69bb      	ldr	r3, [r7, #24]
 8000c88:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c8a:	4b26      	ldr	r3, [pc, #152]	; (8000d24 <HAL_GPIO_Init+0x334>)
 8000c8c:	689b      	ldr	r3, [r3, #8]
 8000c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c90:	693b      	ldr	r3, [r7, #16]
 8000c92:	43db      	mvns	r3, r3
 8000c94:	69ba      	ldr	r2, [r7, #24]
 8000c96:	4013      	ands	r3, r2
 8000c98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d003      	beq.n	8000cae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000ca6:	69ba      	ldr	r2, [r7, #24]
 8000ca8:	693b      	ldr	r3, [r7, #16]
 8000caa:	4313      	orrs	r3, r2
 8000cac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000cae:	4a1d      	ldr	r2, [pc, #116]	; (8000d24 <HAL_GPIO_Init+0x334>)
 8000cb0:	69bb      	ldr	r3, [r7, #24]
 8000cb2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000cb4:	4b1b      	ldr	r3, [pc, #108]	; (8000d24 <HAL_GPIO_Init+0x334>)
 8000cb6:	68db      	ldr	r3, [r3, #12]
 8000cb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000cba:	693b      	ldr	r3, [r7, #16]
 8000cbc:	43db      	mvns	r3, r3
 8000cbe:	69ba      	ldr	r2, [r7, #24]
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d003      	beq.n	8000cd8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000cd0:	69ba      	ldr	r2, [r7, #24]
 8000cd2:	693b      	ldr	r3, [r7, #16]
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000cd8:	4a12      	ldr	r2, [pc, #72]	; (8000d24 <HAL_GPIO_Init+0x334>)
 8000cda:	69bb      	ldr	r3, [r7, #24]
 8000cdc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	61fb      	str	r3, [r7, #28]
 8000ce4:	69fb      	ldr	r3, [r7, #28]
 8000ce6:	2b0f      	cmp	r3, #15
 8000ce8:	f67f ae90 	bls.w	8000a0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000cec:	bf00      	nop
 8000cee:	bf00      	nop
 8000cf0:	3724      	adds	r7, #36	; 0x24
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	40023800 	.word	0x40023800
 8000d00:	40013800 	.word	0x40013800
 8000d04:	40020000 	.word	0x40020000
 8000d08:	40020400 	.word	0x40020400
 8000d0c:	40020800 	.word	0x40020800
 8000d10:	40020c00 	.word	0x40020c00
 8000d14:	40021000 	.word	0x40021000
 8000d18:	40021400 	.word	0x40021400
 8000d1c:	40021800 	.word	0x40021800
 8000d20:	40021c00 	.word	0x40021c00
 8000d24:	40013c00 	.word	0x40013c00

08000d28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000d2c:	4b03      	ldr	r3, [pc, #12]	; (8000d3c <HAL_RCC_GetHCLKFreq+0x14>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	20000004 	.word	0x20000004

08000d40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000d44:	f7ff fff0 	bl	8000d28 <HAL_RCC_GetHCLKFreq>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	4b05      	ldr	r3, [pc, #20]	; (8000d60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000d4c:	689b      	ldr	r3, [r3, #8]
 8000d4e:	0a9b      	lsrs	r3, r3, #10
 8000d50:	f003 0307 	and.w	r3, r3, #7
 8000d54:	4903      	ldr	r1, [pc, #12]	; (8000d64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000d56:	5ccb      	ldrb	r3, [r1, r3]
 8000d58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	40023800 	.word	0x40023800
 8000d64:	080013ec 	.word	0x080013ec

08000d68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000d6c:	f7ff ffdc 	bl	8000d28 <HAL_RCC_GetHCLKFreq>
 8000d70:	4602      	mov	r2, r0
 8000d72:	4b05      	ldr	r3, [pc, #20]	; (8000d88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000d74:	689b      	ldr	r3, [r3, #8]
 8000d76:	0b5b      	lsrs	r3, r3, #13
 8000d78:	f003 0307 	and.w	r3, r3, #7
 8000d7c:	4903      	ldr	r1, [pc, #12]	; (8000d8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8000d7e:	5ccb      	ldrb	r3, [r1, r3]
 8000d80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	40023800 	.word	0x40023800
 8000d8c:	080013ec 	.word	0x080013ec

08000d90 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d101      	bne.n	8000da2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e03f      	b.n	8000e22 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d106      	bne.n	8000dbc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2200      	movs	r2, #0
 8000db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8000db6:	6878      	ldr	r0, [r7, #4]
 8000db8:	f7ff fc06 	bl	80005c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2224      	movs	r2, #36	; 0x24
 8000dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	68da      	ldr	r2, [r3, #12]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000dd2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8000dd4:	6878      	ldr	r0, [r7, #4]
 8000dd6:	f000 f905 	bl	8000fe4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	691a      	ldr	r2, [r3, #16]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000de8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	695a      	ldr	r2, [r3, #20]
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000df8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	68da      	ldr	r2, [r3, #12]
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000e08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2220      	movs	r2, #32
 8000e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2220      	movs	r2, #32
 8000e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000e20:	2300      	movs	r3, #0
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b08a      	sub	sp, #40	; 0x28
 8000e2e:	af02      	add	r7, sp, #8
 8000e30:	60f8      	str	r0, [r7, #12]
 8000e32:	60b9      	str	r1, [r7, #8]
 8000e34:	603b      	str	r3, [r7, #0]
 8000e36:	4613      	mov	r3, r2
 8000e38:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	2b20      	cmp	r3, #32
 8000e48:	d17c      	bne.n	8000f44 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8000e4a:	68bb      	ldr	r3, [r7, #8]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d002      	beq.n	8000e56 <HAL_UART_Transmit+0x2c>
 8000e50:	88fb      	ldrh	r3, [r7, #6]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d101      	bne.n	8000e5a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
 8000e58:	e075      	b.n	8000f46 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000e60:	2b01      	cmp	r3, #1
 8000e62:	d101      	bne.n	8000e68 <HAL_UART_Transmit+0x3e>
 8000e64:	2302      	movs	r3, #2
 8000e66:	e06e      	b.n	8000f46 <HAL_UART_Transmit+0x11c>
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	2200      	movs	r2, #0
 8000e74:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	2221      	movs	r2, #33	; 0x21
 8000e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8000e7e:	f7ff fc8d 	bl	800079c <HAL_GetTick>
 8000e82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	88fa      	ldrh	r2, [r7, #6]
 8000e88:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	88fa      	ldrh	r2, [r7, #6]
 8000e8e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	689b      	ldr	r3, [r3, #8]
 8000e94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e98:	d108      	bne.n	8000eac <HAL_UART_Transmit+0x82>
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	691b      	ldr	r3, [r3, #16]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d104      	bne.n	8000eac <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	61bb      	str	r3, [r7, #24]
 8000eaa:	e003      	b.n	8000eb4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8000ebc:	e02a      	b.n	8000f14 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	9300      	str	r3, [sp, #0]
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	2180      	movs	r1, #128	; 0x80
 8000ec8:	68f8      	ldr	r0, [r7, #12]
 8000eca:	f000 f840 	bl	8000f4e <UART_WaitOnFlagUntilTimeout>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	e036      	b.n	8000f46 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d10b      	bne.n	8000ef6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8000ede:	69bb      	ldr	r3, [r7, #24]
 8000ee0:	881b      	ldrh	r3, [r3, #0]
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000eec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8000eee:	69bb      	ldr	r3, [r7, #24]
 8000ef0:	3302      	adds	r3, #2
 8000ef2:	61bb      	str	r3, [r7, #24]
 8000ef4:	e007      	b.n	8000f06 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	781a      	ldrb	r2, [r3, #0]
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	3301      	adds	r3, #1
 8000f04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000f0a:	b29b      	uxth	r3, r3
 8000f0c:	3b01      	subs	r3, #1
 8000f0e:	b29a      	uxth	r2, r3
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000f18:	b29b      	uxth	r3, r3
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d1cf      	bne.n	8000ebe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	9300      	str	r3, [sp, #0]
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	2200      	movs	r2, #0
 8000f26:	2140      	movs	r1, #64	; 0x40
 8000f28:	68f8      	ldr	r0, [r7, #12]
 8000f2a:	f000 f810 	bl	8000f4e <UART_WaitOnFlagUntilTimeout>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8000f34:	2303      	movs	r3, #3
 8000f36:	e006      	b.n	8000f46 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	2220      	movs	r2, #32
 8000f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8000f40:	2300      	movs	r3, #0
 8000f42:	e000      	b.n	8000f46 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8000f44:	2302      	movs	r3, #2
  }
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3720      	adds	r7, #32
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b084      	sub	sp, #16
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	60f8      	str	r0, [r7, #12]
 8000f56:	60b9      	str	r1, [r7, #8]
 8000f58:	603b      	str	r3, [r7, #0]
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8000f5e:	e02c      	b.n	8000fba <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8000f60:	69bb      	ldr	r3, [r7, #24]
 8000f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f66:	d028      	beq.n	8000fba <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000f68:	69bb      	ldr	r3, [r7, #24]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d007      	beq.n	8000f7e <UART_WaitOnFlagUntilTimeout+0x30>
 8000f6e:	f7ff fc15 	bl	800079c <HAL_GetTick>
 8000f72:	4602      	mov	r2, r0
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	1ad3      	subs	r3, r2, r3
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	d21d      	bcs.n	8000fba <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	68da      	ldr	r2, [r3, #12]
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8000f8c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	695a      	ldr	r2, [r3, #20]
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f022 0201 	bic.w	r2, r2, #1
 8000f9c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	2220      	movs	r2, #32
 8000fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	2220      	movs	r2, #32
 8000faa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	e00f      	b.n	8000fda <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	68ba      	ldr	r2, [r7, #8]
 8000fc6:	429a      	cmp	r2, r3
 8000fc8:	bf0c      	ite	eq
 8000fca:	2301      	moveq	r3, #1
 8000fcc:	2300      	movne	r3, #0
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d0c3      	beq.n	8000f60 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8000fd8:	2300      	movs	r3, #0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3710      	adds	r7, #16
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
	...

08000fe4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000fe8:	b09f      	sub	sp, #124	; 0x7c
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000fee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	691b      	ldr	r3, [r3, #16]
 8000ff4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8000ff8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000ffa:	68d9      	ldr	r1, [r3, #12]
 8000ffc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	ea40 0301 	orr.w	r3, r0, r1
 8001004:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001006:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001008:	689a      	ldr	r2, [r3, #8]
 800100a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800100c:	691b      	ldr	r3, [r3, #16]
 800100e:	431a      	orrs	r2, r3
 8001010:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001012:	695b      	ldr	r3, [r3, #20]
 8001014:	431a      	orrs	r2, r3
 8001016:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001018:	69db      	ldr	r3, [r3, #28]
 800101a:	4313      	orrs	r3, r2
 800101c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800101e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001028:	f021 010c 	bic.w	r1, r1, #12
 800102c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001032:	430b      	orrs	r3, r1
 8001034:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001036:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	695b      	ldr	r3, [r3, #20]
 800103c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001040:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001042:	6999      	ldr	r1, [r3, #24]
 8001044:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	ea40 0301 	orr.w	r3, r0, r1
 800104c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800104e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	4bc5      	ldr	r3, [pc, #788]	; (8001368 <UART_SetConfig+0x384>)
 8001054:	429a      	cmp	r2, r3
 8001056:	d004      	beq.n	8001062 <UART_SetConfig+0x7e>
 8001058:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	4bc3      	ldr	r3, [pc, #780]	; (800136c <UART_SetConfig+0x388>)
 800105e:	429a      	cmp	r2, r3
 8001060:	d103      	bne.n	800106a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001062:	f7ff fe81 	bl	8000d68 <HAL_RCC_GetPCLK2Freq>
 8001066:	6778      	str	r0, [r7, #116]	; 0x74
 8001068:	e002      	b.n	8001070 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800106a:	f7ff fe69 	bl	8000d40 <HAL_RCC_GetPCLK1Freq>
 800106e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001070:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001072:	69db      	ldr	r3, [r3, #28]
 8001074:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001078:	f040 80b6 	bne.w	80011e8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800107c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800107e:	461c      	mov	r4, r3
 8001080:	f04f 0500 	mov.w	r5, #0
 8001084:	4622      	mov	r2, r4
 8001086:	462b      	mov	r3, r5
 8001088:	1891      	adds	r1, r2, r2
 800108a:	6439      	str	r1, [r7, #64]	; 0x40
 800108c:	415b      	adcs	r3, r3
 800108e:	647b      	str	r3, [r7, #68]	; 0x44
 8001090:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001094:	1912      	adds	r2, r2, r4
 8001096:	eb45 0303 	adc.w	r3, r5, r3
 800109a:	f04f 0000 	mov.w	r0, #0
 800109e:	f04f 0100 	mov.w	r1, #0
 80010a2:	00d9      	lsls	r1, r3, #3
 80010a4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80010a8:	00d0      	lsls	r0, r2, #3
 80010aa:	4602      	mov	r2, r0
 80010ac:	460b      	mov	r3, r1
 80010ae:	1911      	adds	r1, r2, r4
 80010b0:	6639      	str	r1, [r7, #96]	; 0x60
 80010b2:	416b      	adcs	r3, r5
 80010b4:	667b      	str	r3, [r7, #100]	; 0x64
 80010b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	461a      	mov	r2, r3
 80010bc:	f04f 0300 	mov.w	r3, #0
 80010c0:	1891      	adds	r1, r2, r2
 80010c2:	63b9      	str	r1, [r7, #56]	; 0x38
 80010c4:	415b      	adcs	r3, r3
 80010c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80010c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80010cc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80010d0:	f7ff f882 	bl	80001d8 <__aeabi_uldivmod>
 80010d4:	4602      	mov	r2, r0
 80010d6:	460b      	mov	r3, r1
 80010d8:	4ba5      	ldr	r3, [pc, #660]	; (8001370 <UART_SetConfig+0x38c>)
 80010da:	fba3 2302 	umull	r2, r3, r3, r2
 80010de:	095b      	lsrs	r3, r3, #5
 80010e0:	011e      	lsls	r6, r3, #4
 80010e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80010e4:	461c      	mov	r4, r3
 80010e6:	f04f 0500 	mov.w	r5, #0
 80010ea:	4622      	mov	r2, r4
 80010ec:	462b      	mov	r3, r5
 80010ee:	1891      	adds	r1, r2, r2
 80010f0:	6339      	str	r1, [r7, #48]	; 0x30
 80010f2:	415b      	adcs	r3, r3
 80010f4:	637b      	str	r3, [r7, #52]	; 0x34
 80010f6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80010fa:	1912      	adds	r2, r2, r4
 80010fc:	eb45 0303 	adc.w	r3, r5, r3
 8001100:	f04f 0000 	mov.w	r0, #0
 8001104:	f04f 0100 	mov.w	r1, #0
 8001108:	00d9      	lsls	r1, r3, #3
 800110a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800110e:	00d0      	lsls	r0, r2, #3
 8001110:	4602      	mov	r2, r0
 8001112:	460b      	mov	r3, r1
 8001114:	1911      	adds	r1, r2, r4
 8001116:	65b9      	str	r1, [r7, #88]	; 0x58
 8001118:	416b      	adcs	r3, r5
 800111a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800111c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	461a      	mov	r2, r3
 8001122:	f04f 0300 	mov.w	r3, #0
 8001126:	1891      	adds	r1, r2, r2
 8001128:	62b9      	str	r1, [r7, #40]	; 0x28
 800112a:	415b      	adcs	r3, r3
 800112c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800112e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001132:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001136:	f7ff f84f 	bl	80001d8 <__aeabi_uldivmod>
 800113a:	4602      	mov	r2, r0
 800113c:	460b      	mov	r3, r1
 800113e:	4b8c      	ldr	r3, [pc, #560]	; (8001370 <UART_SetConfig+0x38c>)
 8001140:	fba3 1302 	umull	r1, r3, r3, r2
 8001144:	095b      	lsrs	r3, r3, #5
 8001146:	2164      	movs	r1, #100	; 0x64
 8001148:	fb01 f303 	mul.w	r3, r1, r3
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	00db      	lsls	r3, r3, #3
 8001150:	3332      	adds	r3, #50	; 0x32
 8001152:	4a87      	ldr	r2, [pc, #540]	; (8001370 <UART_SetConfig+0x38c>)
 8001154:	fba2 2303 	umull	r2, r3, r2, r3
 8001158:	095b      	lsrs	r3, r3, #5
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001160:	441e      	add	r6, r3
 8001162:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001164:	4618      	mov	r0, r3
 8001166:	f04f 0100 	mov.w	r1, #0
 800116a:	4602      	mov	r2, r0
 800116c:	460b      	mov	r3, r1
 800116e:	1894      	adds	r4, r2, r2
 8001170:	623c      	str	r4, [r7, #32]
 8001172:	415b      	adcs	r3, r3
 8001174:	627b      	str	r3, [r7, #36]	; 0x24
 8001176:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800117a:	1812      	adds	r2, r2, r0
 800117c:	eb41 0303 	adc.w	r3, r1, r3
 8001180:	f04f 0400 	mov.w	r4, #0
 8001184:	f04f 0500 	mov.w	r5, #0
 8001188:	00dd      	lsls	r5, r3, #3
 800118a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800118e:	00d4      	lsls	r4, r2, #3
 8001190:	4622      	mov	r2, r4
 8001192:	462b      	mov	r3, r5
 8001194:	1814      	adds	r4, r2, r0
 8001196:	653c      	str	r4, [r7, #80]	; 0x50
 8001198:	414b      	adcs	r3, r1
 800119a:	657b      	str	r3, [r7, #84]	; 0x54
 800119c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	461a      	mov	r2, r3
 80011a2:	f04f 0300 	mov.w	r3, #0
 80011a6:	1891      	adds	r1, r2, r2
 80011a8:	61b9      	str	r1, [r7, #24]
 80011aa:	415b      	adcs	r3, r3
 80011ac:	61fb      	str	r3, [r7, #28]
 80011ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80011b2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80011b6:	f7ff f80f 	bl	80001d8 <__aeabi_uldivmod>
 80011ba:	4602      	mov	r2, r0
 80011bc:	460b      	mov	r3, r1
 80011be:	4b6c      	ldr	r3, [pc, #432]	; (8001370 <UART_SetConfig+0x38c>)
 80011c0:	fba3 1302 	umull	r1, r3, r3, r2
 80011c4:	095b      	lsrs	r3, r3, #5
 80011c6:	2164      	movs	r1, #100	; 0x64
 80011c8:	fb01 f303 	mul.w	r3, r1, r3
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	00db      	lsls	r3, r3, #3
 80011d0:	3332      	adds	r3, #50	; 0x32
 80011d2:	4a67      	ldr	r2, [pc, #412]	; (8001370 <UART_SetConfig+0x38c>)
 80011d4:	fba2 2303 	umull	r2, r3, r2, r3
 80011d8:	095b      	lsrs	r3, r3, #5
 80011da:	f003 0207 	and.w	r2, r3, #7
 80011de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4432      	add	r2, r6
 80011e4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80011e6:	e0b9      	b.n	800135c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80011e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80011ea:	461c      	mov	r4, r3
 80011ec:	f04f 0500 	mov.w	r5, #0
 80011f0:	4622      	mov	r2, r4
 80011f2:	462b      	mov	r3, r5
 80011f4:	1891      	adds	r1, r2, r2
 80011f6:	6139      	str	r1, [r7, #16]
 80011f8:	415b      	adcs	r3, r3
 80011fa:	617b      	str	r3, [r7, #20]
 80011fc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001200:	1912      	adds	r2, r2, r4
 8001202:	eb45 0303 	adc.w	r3, r5, r3
 8001206:	f04f 0000 	mov.w	r0, #0
 800120a:	f04f 0100 	mov.w	r1, #0
 800120e:	00d9      	lsls	r1, r3, #3
 8001210:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001214:	00d0      	lsls	r0, r2, #3
 8001216:	4602      	mov	r2, r0
 8001218:	460b      	mov	r3, r1
 800121a:	eb12 0804 	adds.w	r8, r2, r4
 800121e:	eb43 0905 	adc.w	r9, r3, r5
 8001222:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	4618      	mov	r0, r3
 8001228:	f04f 0100 	mov.w	r1, #0
 800122c:	f04f 0200 	mov.w	r2, #0
 8001230:	f04f 0300 	mov.w	r3, #0
 8001234:	008b      	lsls	r3, r1, #2
 8001236:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800123a:	0082      	lsls	r2, r0, #2
 800123c:	4640      	mov	r0, r8
 800123e:	4649      	mov	r1, r9
 8001240:	f7fe ffca 	bl	80001d8 <__aeabi_uldivmod>
 8001244:	4602      	mov	r2, r0
 8001246:	460b      	mov	r3, r1
 8001248:	4b49      	ldr	r3, [pc, #292]	; (8001370 <UART_SetConfig+0x38c>)
 800124a:	fba3 2302 	umull	r2, r3, r3, r2
 800124e:	095b      	lsrs	r3, r3, #5
 8001250:	011e      	lsls	r6, r3, #4
 8001252:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001254:	4618      	mov	r0, r3
 8001256:	f04f 0100 	mov.w	r1, #0
 800125a:	4602      	mov	r2, r0
 800125c:	460b      	mov	r3, r1
 800125e:	1894      	adds	r4, r2, r2
 8001260:	60bc      	str	r4, [r7, #8]
 8001262:	415b      	adcs	r3, r3
 8001264:	60fb      	str	r3, [r7, #12]
 8001266:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800126a:	1812      	adds	r2, r2, r0
 800126c:	eb41 0303 	adc.w	r3, r1, r3
 8001270:	f04f 0400 	mov.w	r4, #0
 8001274:	f04f 0500 	mov.w	r5, #0
 8001278:	00dd      	lsls	r5, r3, #3
 800127a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800127e:	00d4      	lsls	r4, r2, #3
 8001280:	4622      	mov	r2, r4
 8001282:	462b      	mov	r3, r5
 8001284:	1814      	adds	r4, r2, r0
 8001286:	64bc      	str	r4, [r7, #72]	; 0x48
 8001288:	414b      	adcs	r3, r1
 800128a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800128c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	4618      	mov	r0, r3
 8001292:	f04f 0100 	mov.w	r1, #0
 8001296:	f04f 0200 	mov.w	r2, #0
 800129a:	f04f 0300 	mov.w	r3, #0
 800129e:	008b      	lsls	r3, r1, #2
 80012a0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80012a4:	0082      	lsls	r2, r0, #2
 80012a6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80012aa:	f7fe ff95 	bl	80001d8 <__aeabi_uldivmod>
 80012ae:	4602      	mov	r2, r0
 80012b0:	460b      	mov	r3, r1
 80012b2:	4b2f      	ldr	r3, [pc, #188]	; (8001370 <UART_SetConfig+0x38c>)
 80012b4:	fba3 1302 	umull	r1, r3, r3, r2
 80012b8:	095b      	lsrs	r3, r3, #5
 80012ba:	2164      	movs	r1, #100	; 0x64
 80012bc:	fb01 f303 	mul.w	r3, r1, r3
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	011b      	lsls	r3, r3, #4
 80012c4:	3332      	adds	r3, #50	; 0x32
 80012c6:	4a2a      	ldr	r2, [pc, #168]	; (8001370 <UART_SetConfig+0x38c>)
 80012c8:	fba2 2303 	umull	r2, r3, r2, r3
 80012cc:	095b      	lsrs	r3, r3, #5
 80012ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012d2:	441e      	add	r6, r3
 80012d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80012d6:	4618      	mov	r0, r3
 80012d8:	f04f 0100 	mov.w	r1, #0
 80012dc:	4602      	mov	r2, r0
 80012de:	460b      	mov	r3, r1
 80012e0:	1894      	adds	r4, r2, r2
 80012e2:	603c      	str	r4, [r7, #0]
 80012e4:	415b      	adcs	r3, r3
 80012e6:	607b      	str	r3, [r7, #4]
 80012e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80012ec:	1812      	adds	r2, r2, r0
 80012ee:	eb41 0303 	adc.w	r3, r1, r3
 80012f2:	f04f 0400 	mov.w	r4, #0
 80012f6:	f04f 0500 	mov.w	r5, #0
 80012fa:	00dd      	lsls	r5, r3, #3
 80012fc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8001300:	00d4      	lsls	r4, r2, #3
 8001302:	4622      	mov	r2, r4
 8001304:	462b      	mov	r3, r5
 8001306:	eb12 0a00 	adds.w	sl, r2, r0
 800130a:	eb43 0b01 	adc.w	fp, r3, r1
 800130e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	4618      	mov	r0, r3
 8001314:	f04f 0100 	mov.w	r1, #0
 8001318:	f04f 0200 	mov.w	r2, #0
 800131c:	f04f 0300 	mov.w	r3, #0
 8001320:	008b      	lsls	r3, r1, #2
 8001322:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8001326:	0082      	lsls	r2, r0, #2
 8001328:	4650      	mov	r0, sl
 800132a:	4659      	mov	r1, fp
 800132c:	f7fe ff54 	bl	80001d8 <__aeabi_uldivmod>
 8001330:	4602      	mov	r2, r0
 8001332:	460b      	mov	r3, r1
 8001334:	4b0e      	ldr	r3, [pc, #56]	; (8001370 <UART_SetConfig+0x38c>)
 8001336:	fba3 1302 	umull	r1, r3, r3, r2
 800133a:	095b      	lsrs	r3, r3, #5
 800133c:	2164      	movs	r1, #100	; 0x64
 800133e:	fb01 f303 	mul.w	r3, r1, r3
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	011b      	lsls	r3, r3, #4
 8001346:	3332      	adds	r3, #50	; 0x32
 8001348:	4a09      	ldr	r2, [pc, #36]	; (8001370 <UART_SetConfig+0x38c>)
 800134a:	fba2 2303 	umull	r2, r3, r2, r3
 800134e:	095b      	lsrs	r3, r3, #5
 8001350:	f003 020f 	and.w	r2, r3, #15
 8001354:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4432      	add	r2, r6
 800135a:	609a      	str	r2, [r3, #8]
}
 800135c:	bf00      	nop
 800135e:	377c      	adds	r7, #124	; 0x7c
 8001360:	46bd      	mov	sp, r7
 8001362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001366:	bf00      	nop
 8001368:	40011000 	.word	0x40011000
 800136c:	40011400 	.word	0x40011400
 8001370:	51eb851f 	.word	0x51eb851f

08001374 <__libc_init_array>:
 8001374:	b570      	push	{r4, r5, r6, lr}
 8001376:	4d0d      	ldr	r5, [pc, #52]	; (80013ac <__libc_init_array+0x38>)
 8001378:	4c0d      	ldr	r4, [pc, #52]	; (80013b0 <__libc_init_array+0x3c>)
 800137a:	1b64      	subs	r4, r4, r5
 800137c:	10a4      	asrs	r4, r4, #2
 800137e:	2600      	movs	r6, #0
 8001380:	42a6      	cmp	r6, r4
 8001382:	d109      	bne.n	8001398 <__libc_init_array+0x24>
 8001384:	4d0b      	ldr	r5, [pc, #44]	; (80013b4 <__libc_init_array+0x40>)
 8001386:	4c0c      	ldr	r4, [pc, #48]	; (80013b8 <__libc_init_array+0x44>)
 8001388:	f000 f818 	bl	80013bc <_init>
 800138c:	1b64      	subs	r4, r4, r5
 800138e:	10a4      	asrs	r4, r4, #2
 8001390:	2600      	movs	r6, #0
 8001392:	42a6      	cmp	r6, r4
 8001394:	d105      	bne.n	80013a2 <__libc_init_array+0x2e>
 8001396:	bd70      	pop	{r4, r5, r6, pc}
 8001398:	f855 3b04 	ldr.w	r3, [r5], #4
 800139c:	4798      	blx	r3
 800139e:	3601      	adds	r6, #1
 80013a0:	e7ee      	b.n	8001380 <__libc_init_array+0xc>
 80013a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80013a6:	4798      	blx	r3
 80013a8:	3601      	adds	r6, #1
 80013aa:	e7f2      	b.n	8001392 <__libc_init_array+0x1e>
 80013ac:	080013fc 	.word	0x080013fc
 80013b0:	080013fc 	.word	0x080013fc
 80013b4:	080013fc 	.word	0x080013fc
 80013b8:	08001400 	.word	0x08001400

080013bc <_init>:
 80013bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013be:	bf00      	nop
 80013c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013c2:	bc08      	pop	{r3}
 80013c4:	469e      	mov	lr, r3
 80013c6:	4770      	bx	lr

080013c8 <_fini>:
 80013c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013ca:	bf00      	nop
 80013cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013ce:	bc08      	pop	{r3}
 80013d0:	469e      	mov	lr, r3
 80013d2:	4770      	bx	lr
